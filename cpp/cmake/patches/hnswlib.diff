diff --git a/hnswlib/hnswalg.h b/hnswlib/hnswalg.h
index bef0017..2ef85d9 100644
--- a/hnswlib/hnswalg.h
+++ b/hnswlib/hnswalg.h
@@ -3,6 +3,7 @@
 #include "visited_list_pool.h"
 #include "hnswlib.h"
 #include <atomic>
+#include <limits>
 #include <random>
 #include <stdlib.h>
 #include <assert.h>
@@ -16,6 +17,9 @@ typedef unsigned int linklistsizeint;
 template<typename dist_t>
 class HierarchicalNSW : public AlgorithmInterface<dist_t> {
  public:
+    bool base_layer_only = false;
+    int num_seeds = 32;
+    bool base_layer_init = true;
     static const tableint MAX_LABEL_OPERATION_LOCKS = 65536;
     static const unsigned char DELETE_MARK = 0x01;
 
@@ -125,7 +129,7 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
         visited_list_pool_ = new VisitedListPool(1, max_elements);
 
         // initializations for special treatment of the first node
-        enterpoint_node_ = -1;
+        enterpoint_node_ = std::numeric_limits<tableint>::max();
         maxlevel_ = -1;
 
         linkLists_ = (char **) malloc(sizeof(void *) * max_elements_);
@@ -1138,7 +1142,7 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
                         tableint *datal = (tableint *) (data + 1);
                         for (int i = 0; i < size; i++) {
                             tableint cand = datal[i];
-                            if (cand < 0 || cand > max_elements_)
+                            if (cand > max_elements_)
                                 throw std::runtime_error("cand error");
                             dist_t d = fstdistfunc_(data_point, getDataByInternalId(cand), dist_func_param_);
                             if (d < curdist) {
@@ -1152,7 +1156,7 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
             }
 
             bool epDeleted = isMarkedDeleted(enterpoint_copy);
-            for (int level = std::min(curlevel, maxlevelcopy); level >= 0; level--) {
+            for (int level = std::min(curlevel, maxlevelcopy); level >= !base_level_init; level--) {
                 if (level > maxlevelcopy || level < 0)  // possible?
                     throw std::runtime_error("Level error");
 
@@ -1188,28 +1192,41 @@ class HierarchicalNSW : public AlgorithmInterface<dist_t> {
         tableint currObj = enterpoint_node_;
         dist_t curdist = fstdistfunc_(query_data, getDataByInternalId(enterpoint_node_), dist_func_param_);
 
-        for (int level = maxlevel_; level > 0; level--) {
-            bool changed = true;
-            while (changed) {
-                changed = false;
-                unsigned int *data;
+        if (base_layer_only) {
+            // You can increase the number of seeds when testing large-scale dataset, num_seeds = 48 for 100M-scale
+            for (int i = 0; i < num_seeds; i) {
+                tableint obj = i * (max_elements_ / num_seeds);
+                dist_t dist = fstdistfunc_(query_data, getDataByInternalId(obj), dist_func_param_);
+                if (dist < curdist) {
+                    curdist = dist;
+                    currObj = obj;
+                }
+            }
+        }
+        else {
+            for (int level = maxlevel_; level > 0; level--) {
+                bool changed = true;
+                while (changed) {
+                    changed = false;
+                    unsigned int *data;
 
-                data = (unsigned int *) get_linklist(currObj, level);
-                int size = getListCount(data);
-                metric_hops++;
-                metric_distance_computations+=size;
+                    data = (unsigned int *) get_linklist(currObj, level);
+                    int size = getListCount(data);
+                    metric_hops++;
+                    metric_distance_computations+=size;
 
-                tableint *datal = (tableint *) (data + 1);
-                for (int i = 0; i < size; i++) {
-                    tableint cand = datal[i];
-                    if (cand < 0 || cand > max_elements_)
-                        throw std::runtime_error("cand error");
-                    dist_t d = fstdistfunc_(query_data, getDataByInternalId(cand), dist_func_param_);
-
-                    if (d < curdist) {
-                        curdist = d;
-                        currObj = cand;
-                        changed = true;
+                    tableint *datal = (tableint *) (data + 1);
+                    for (int i = 0; i < size; i++) {
+                        tableint cand = datal[i];
+                        if (cand > max_elements_)
+                            throw std::runtime_error("cand error");
+                        dist_t d = fstdistfunc_(query_data, getDataByInternalId(cand), dist_func_param_);
+
+                        if (d < curdist) {
+                            curdist = d;
+                            currObj = cand;
+                            changed = true;
+                        }
                     }
                 }
             }
diff --git a/hnswlib/space_l2.h b/hnswlib/space_l2.h
index 834d19f..0c0af26 100644
--- a/hnswlib/space_l2.h
+++ b/hnswlib/space_l2.h
@@ -252,12 +252,13 @@ class L2Space : public SpaceInterface<float> {
     ~L2Space() {}
 };
 
+template <typename T>
 static int
 L2SqrI4x(const void *__restrict pVect1, const void *__restrict pVect2, const void *__restrict qty_ptr) {
     size_t qty = *((size_t *) qty_ptr);
     int res = 0;
-    unsigned char *a = (unsigned char *) pVect1;
-    unsigned char *b = (unsigned char *) pVect2;
+    T *a = (T *) pVect1;
+    T *b = (T *) pVect2;
 
     qty = qty >> 2;
     for (size_t i = 0; i < qty; i++) {
@@ -277,11 +278,12 @@ L2SqrI4x(const void *__restrict pVect1, const void *__restrict pVect2, const voi
     return (res);
 }
 
+template <typename T>
 static int L2SqrI(const void* __restrict pVect1, const void* __restrict pVect2, const void* __restrict qty_ptr) {
     size_t qty = *((size_t*)qty_ptr);
     int res = 0;
-    unsigned char* a = (unsigned char*)pVect1;
-    unsigned char* b = (unsigned char*)pVect2;
+    T* a = (T*)pVect1;
+    T* b = (T*)pVect2;
 
     for (size_t i = 0; i < qty; i++) {
         res += ((*a) - (*b)) * ((*a) - (*b));
@@ -291,6 +293,7 @@ static int L2SqrI(const void* __restrict pVect1, const void* __restrict pVect2,
     return (res);
 }
 
+template <typename T>
 class L2SpaceI : public SpaceInterface<int> {
     DISTFUNC<int> fstdistfunc_;
     size_t data_size_;
@@ -299,9 +302,9 @@ class L2SpaceI : public SpaceInterface<int> {
  public:
     L2SpaceI(size_t dim) {
         if (dim % 4 == 0) {
-            fstdistfunc_ = L2SqrI4x;
+            fstdistfunc_ = L2SqrI4x<T>;
         } else {
-            fstdistfunc_ = L2SqrI;
+            fstdistfunc_ = L2SqrI<T>;
         }
         dim_ = dim;
         data_size_ = dim * sizeof(unsigned char);
diff --git a/hnswlib/visited_list_pool.h b/hnswlib/visited_list_pool.h
index 2e201ec..77722ba 100644
--- a/hnswlib/visited_list_pool.h
+++ b/hnswlib/visited_list_pool.h
@@ -3,6 +3,7 @@
 #include <mutex>
 #include <string.h>
 #include <deque>
+#include <limits>
 
 namespace hnswlib {
 typedef unsigned short int vl_type;
@@ -14,7 +15,7 @@ class VisitedList {
     unsigned int numelements;
 
     VisitedList(int numelements1) {
-        curV = -1;
+        curV = std::numeric_limits<vl_type>::max();
         numelements = numelements1;
         mass = new vl_type[numelements];
     }
